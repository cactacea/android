/**
* Cactacea backend API
* Cactacea / Cactacea backend API for web and mobile applications
*
* OpenAPI spec version: 0.6.3-SNAPSHOT
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.github.cactacea.backend.Account
import io.github.cactacea.backend.BadRequest
import io.github.cactacea.backend.GetAuthenticationCodeBody
import io.github.cactacea.backend.GetSocialAccountSignInBody
import io.github.cactacea.backend.NotFound
import io.github.cactacea.backend.PostSocialAccountBody
import io.github.cactacea.backend.PostSocialAccountSignUpBody
import io.github.cactacea.backend.SocialAccount

import io.swagger.client.infrastructure.*

class SocialAccountsApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
    * Connect to social account
    * 
    * @param accessTokenKey OAuth2 access token. 
    * @param accessTokenSecret OAuth2 access token secret. 
    * @param body  
    * @return void
    */
    fun connect(accessTokenKey: kotlin.String, accessTokenSecret: kotlin.String, body: PostSocialAccountBody) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("accessTokenKey" to listOf("$accessTokenKey"), "accessTokenSecret" to listOf("$accessTokenSecret"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Disconnect from social account
    * 
    * @return void
    */
    fun disconnect() : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get status abount social accounts
    * 
    * @return kotlin.Array<SocialAccount>
    */
    @Suppress("UNCHECKED_CAST")
    fun findSessionSocialAccounts() : kotlin.Array<SocialAccount> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<SocialAccount>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<SocialAccount>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Issue authentication code.
    * 
    * @param providerKey OAuth2 access token or phone number or email address. 
    * @param body  
    * @return Account
    */
    @Suppress("UNCHECKED_CAST")
    fun issueCode(providerKey: kotlin.String, body: GetAuthenticationCodeBody) : Account {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("providerKey" to listOf("$providerKey"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/sessions/social_accounts/issue_code",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Account>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Account
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Sign in by social accounts
    * 
    * @param providerKey OAuth2 access token or phone number or email address. 
    * @param authenticationCode OAuth2 access token secret or issued code. 
    * @param udid Unique Device Identifier. 
    * @param body  
    * @param userAgent  (optional)
    * @return Account
    */
    @Suppress("UNCHECKED_CAST")
    fun socialSignIn(providerKey: kotlin.String, authenticationCode: kotlin.String, udid: kotlin.String, body: GetSocialAccountSignInBody, userAgent: kotlin.String) : Account {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("providerKey" to listOf("$providerKey"), "authenticationCode" to listOf("$authenticationCode"), "udid" to listOf("$udid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("userAgent" to userAgent)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/sessions/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Account>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Account
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Sign up by social accounts
    * 
    * @param providerKey OAuth2 access token or phone number or email address. 
    * @param authenticationCode OAuth2 access token secret or issued code. 
    * @param udid Unique Device Identifier. 
    * @param body  
    * @param userAgent  (optional)
    * @return Account
    */
    @Suppress("UNCHECKED_CAST")
    fun socialSignUp(providerKey: kotlin.String, authenticationCode: kotlin.String, udid: kotlin.String, body: PostSocialAccountSignUpBody, userAgent: kotlin.String) : Account {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("providerKey" to listOf("$providerKey"), "authenticationCode" to listOf("$authenticationCode"), "udid" to listOf("$udid"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("userAgent" to userAgent)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sessions/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Account>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Account
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
