/**
* Cactacea backend API
* Cactacea / Cactacea backend API for web and mobile applications
*
* OpenAPI spec version: 18.11.8
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import io.github.cactacea.backend.CactaceaErrors
import io.github.cactacea.backend.DeleteMessagesBody
import io.github.cactacea.backend.Message
import io.github.cactacea.backend.MessageCreated
import io.github.cactacea.backend.PostMessageBody

import org.openapitools.client.infrastructure.*

class MessagesApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Delete messages form a group
    * 
    * @param deleteMessagesBody  
    * @return void
    */
    fun deleteMessage(deleteMessagesBody: DeleteMessagesBody) : Unit {
        val localVariableBody: kotlin.Any? = deleteMessagesBody
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/messages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Search messages
    * 
    * @param id Group identifier. 
    * @param ascending Order by posted time. 
    * @param since Filters messages which started on since or later. (optional, default to null)
    * @param offset The offset of messages. By default the value is 0. (optional, default to null)
    * @param count Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional, default to null)
    * @return Message
    */
    @Suppress("UNCHECKED_CAST")
    fun findMessages(id: java.math.BigDecimal, ascending: kotlin.Boolean, since: java.math.BigDecimal, offset: java.math.BigDecimal, count: java.math.BigDecimal) : Message {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("id" to listOf("$id"), "since" to listOf("$since"), "offset" to listOf("$offset"), "count" to listOf("$count"), "ascending" to listOf("$ascending"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/messages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Message>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Message
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Post a message to a group
    * 
    * @param postMessageBody  
    * @return MessageCreated
    */
    @Suppress("UNCHECKED_CAST")
    fun postMessage(postMessageBody: PostMessageBody) : MessageCreated {
        val localVariableBody: kotlin.Any? = postMessageBody
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/messages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MessageCreated>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MessageCreated
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
